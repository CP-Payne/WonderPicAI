// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package ui

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func ThemeToggle() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<label class=\"swap swap-rotate\"><!-- this hidden checkbox controls the state --><input type=\"checkbox\" class=\"theme-controller\" value=\"lofi\"><!-- sun icon --><svg class=\"swap-off h-10 w-10 fill-current\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z\"></path></svg><!-- moon icon --><svg class=\"swap-on h-10 w-10 fill-current\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z\"></path></svg></label>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ThemePersistenceJS() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<script>\n        document.addEventListener('DOMContentLoaded', function () {\n            const themeToggleCheckbox = document.querySelector('input.theme-controller');\n            const htmlEl = document.documentElement;\n\n            // --- Configuration ---\n            // The theme that is active when the checkbox's 'value' attribute is matched\n            // For example, if your checkbox is: <input type=\"checkbox\" class=\"theme-controller\" value=\"cupcake\"/>\n            // then 'themeWhenChecked' should be \"cupcake\".\n            const themeWhenChecked = themeToggleCheckbox ? themeToggleCheckbox.value : \"light\"; // Default to \"light\" if no checkbox or no value\n\n            // The theme that is active when the checkbox is UNCHECKED.\n            // This is your \"other\" theme, often a dark theme.\n            const themeWhenUnchecked = \"forest\"; // Or \"night\", \"dracula\", etc.\n                                           // Make sure this theme is enabled in your tailwind.config.js\n\n            const localStorageKey = 'theme';\n            // --- End Configuration ---\n\n            // Function to apply a theme and update the checkbox state\n            function applyTheme(themeName) {\n                htmlEl.setAttribute('data-theme', themeName);\n                localStorage.setItem(localStorageKey, themeName);\n\n                if (themeToggleCheckbox) {\n                    // If the current theme is the one that should be active when the checkbox is checked,\n                    // then ensure the checkbox IS checked.\n                    themeToggleCheckbox.checked = (themeName === themeWhenChecked);\n                }\n            }\n\n            // Determine and apply the initial theme\n            let initialTheme = localStorage.getItem(localStorageKey);\n\n            if (!initialTheme) { // No theme saved in localStorage\n                // Check OS preference if the checkbox exists to determine a sensible default\n                if (themeToggleCheckbox && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                    initialTheme = themeWhenUnchecked; // Default to the \"unchecked\" theme (usually dark)\n                } else {\n                    initialTheme = themeWhenChecked;   // Default to the \"checked\" theme (usually light)\n                }\n            }\n            applyTheme(initialTheme);\n\n\n            // Event listener for the theme toggle checkbox\n            if (themeToggleCheckbox) {\n                themeToggleCheckbox.addEventListener('change', function() {\n                    if (this.checked) {\n                        // When checkbox is checked, it means we want the theme specified in its 'value'\n                        // which we've stored in 'themeWhenChecked'.\n                        applyTheme(themeWhenChecked);\n                    } else {\n                        // When checkbox is unchecked, we want the 'other' theme.\n                        applyTheme(themeWhenUnchecked);\n                    }\n                });\n            }\n\n            // Optional: Listen for OS theme changes to update if no user preference is set\n            // This is useful if the user hasn't manually toggled the theme yet.\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                // Only apply OS preference if the user hasn't explicitly set a theme via the toggle\n                if (!localStorage.getItem(localStorageKey)) {\n                    if (e.matches) {\n                        applyTheme(themeWhenUnchecked);\n                    } else {\n                        applyTheme(themeWhenChecked);\n                    }\n                }\n            });\n        });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate

package ui

templ ThemeToggle() {
	<label class="swap swap-rotate">
		<!-- this hidden checkbox controls the state -->
		<input type="checkbox" class="theme-controller" value="lofi"/>
		<!-- sun icon -->
		<svg
			class="swap-off h-10 w-10 fill-current"
			xmlns="http://www.w3.org/2000/svg"
			viewBox="0 0 24 24"
		>
			<path
				d="M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z"
			></path>
		</svg>
		<!-- moon icon -->
		<svg
			class="swap-on h-10 w-10 fill-current"
			xmlns="http://www.w3.org/2000/svg"
			viewBox="0 0 24 24"
		>
			<path
				d="M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z"
			></path>
		</svg>
	</label>
}

templ ThemePersistenceJS() {
	<script>
        document.addEventListener('DOMContentLoaded', function () {
            const themeToggleCheckbox = document.querySelector('input.theme-controller');
            const htmlEl = document.documentElement;

            // --- Configuration ---
            // The theme that is active when the checkbox's 'value' attribute is matched
            // For example, if your checkbox is: <input type="checkbox" class="theme-controller" value="cupcake"/>
            // then 'themeWhenChecked' should be "cupcake".
            const themeWhenChecked = themeToggleCheckbox ? themeToggleCheckbox.value : "light"; // Default to "light" if no checkbox or no value

            // The theme that is active when the checkbox is UNCHECKED.
            // This is your "other" theme, often a dark theme.
            const themeWhenUnchecked = "forest"; // Or "night", "dracula", etc.
                                           // Make sure this theme is enabled in your tailwind.config.js

            const localStorageKey = 'theme';
            // --- End Configuration ---

            // Function to apply a theme and update the checkbox state
            function applyTheme(themeName) {
                htmlEl.setAttribute('data-theme', themeName);
                localStorage.setItem(localStorageKey, themeName);

                if (themeToggleCheckbox) {
                    // If the current theme is the one that should be active when the checkbox is checked,
                    // then ensure the checkbox IS checked.
                    themeToggleCheckbox.checked = (themeName === themeWhenChecked);
                }
            }

            // Determine and apply the initial theme
            let initialTheme = localStorage.getItem(localStorageKey);

            if (!initialTheme) { // No theme saved in localStorage
                // Check OS preference if the checkbox exists to determine a sensible default
                if (themeToggleCheckbox && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                    initialTheme = themeWhenUnchecked; // Default to the "unchecked" theme (usually dark)
                } else {
                    initialTheme = themeWhenChecked;   // Default to the "checked" theme (usually light)
                }
            }
            applyTheme(initialTheme);


            // Event listener for the theme toggle checkbox
            if (themeToggleCheckbox) {
                themeToggleCheckbox.addEventListener('change', function() {
                    if (this.checked) {
                        // When checkbox is checked, it means we want the theme specified in its 'value'
                        // which we've stored in 'themeWhenChecked'.
                        applyTheme(themeWhenChecked);
                    } else {
                        // When checkbox is unchecked, we want the 'other' theme.
                        applyTheme(themeWhenUnchecked);
                    }
                });
            }

            // Optional: Listen for OS theme changes to update if no user preference is set
            // This is useful if the user hasn't manually toggled the theme yet.
            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
                // Only apply OS preference if the user hasn't explicitly set a theme via the toggle
                if (!localStorage.getItem(localStorageKey)) {
                    if (e.matches) {
                        applyTheme(themeWhenUnchecked);
                    } else {
                        applyTheme(themeWhenChecked);
                    }
                }
            });
        });
    </script>
}

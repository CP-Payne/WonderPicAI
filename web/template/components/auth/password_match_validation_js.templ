package auth

templ PasswordMatchValidationJS() {
	<script>
        document.addEventListener('DOMContentLoaded', function() {
            const passwordInput = document.getElementById('password-input');
            const confirmPasswordInput = document.getElementById('confirm-password-input');
            const confirmPasswordErrorElement = document.getElementById('confirm-password-error'); // Element to show the error

            if (!passwordInput || !confirmPasswordInput || !confirmPasswordErrorElement) {
                console.warn('Password match validation: One or more required elements not found.');
                return; // Exit if elements are missing
            }

            function validatePasswordsMatch() {
                if (confirmPasswordInput.value === "") { // Don't show error if confirm is empty
                    confirmPasswordErrorElement.textContent = "";
                    confirmPasswordInput.setCustomValidity(""); // Clear potential HTML5 validation error
                    return;
                }

                if (passwordInput.value !== confirmPasswordInput.value) {
                    confirmPasswordErrorElement.textContent = "Passwords do not match.";
                    // For HTML5 form validation API - prevents submission if you want
                    // You can remove this if you only want to show the text message
                    confirmPasswordInput.setCustomValidity("Passwords do not match.");
                } else {
                    confirmPasswordErrorElement.textContent = ""; // Clear the error message
                    confirmPasswordInput.setCustomValidity("");   // Clear potential HTML5 validation error
                }
            }

            // Validate when the confirm password field loses focus
            confirmPasswordInput.addEventListener('blur', validatePasswordsMatch);

            // Optional: Also validate as the user types in the confirm password field
            // confirmPasswordInput.addEventListener('input', validatePasswordsMatch);

            // Optional: If the main password changes, re-validate the confirm password
            // (in case the user goes back and changes the first password)
            passwordInput.addEventListener('input', function() {
                // Only re-validate if confirm password field is not empty
                if (confirmPasswordInput.value !== "") {
                    validatePasswordsMatch();
                }
            });
        });
    </script>
}

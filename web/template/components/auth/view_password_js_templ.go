// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package auth

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

var ViewPasswordJSHandle = templ.NewOnceHandle()

func ViewPasswordJS2() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\n    document.addEventListener('DOMContentLoaded', function () {\n        const togglePasswordButtons = document.querySelectorAll('.toggle-password-visibility');\n\n        togglePasswordButtons.forEach(button => {\n            const targetInputId = button.dataset.targetInput; // Get the target input's ID from the data attribute\n\n            if (!targetInputId) {\n                console.warn('Button is missing data-target-input attribute:', button);\n                return;\n            }\n\n            const passwordInput = document.getElementById(targetInputId);\n\n            const eyeIcon = button.querySelector('.eye-icon');\n            const eyeSlashIcon = button.querySelector('.eye-slash-icon');\n\n            if (passwordInput && eyeIcon && eyeSlashIcon) {\n                button.addEventListener('click', function () {\n                    const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';\n                    passwordInput.setAttribute('type', type);\n\n                    if (type === 'text') {\n                        eyeIcon.classList.add('hidden');\n                        eyeSlashIcon.classList.remove('hidden');\n                    } else {\n                        eyeIcon.classList.remove('hidden');\n                        eyeSlashIcon.classList.add('hidden');\n                    }\n                });\n            } else {\n                if (!passwordInput) console.warn('Could not find password input with ID:', targetInputId, 'for button:', button);\n                if (!eyeIcon) console.warn('Could not find .eye-icon in button:', button);\n                if (!eyeSlashIcon) console.warn('Could not find .eye-slash-icon in button:', button);\n            }\n        });\n    });\n</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = ViewPasswordJSHandle.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ViewPasswordJS() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var4 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<script>\n    function initializePasswordMatchValidation(parentElement) {\n        // Scope selectors to the parentElement\n        const passwordInput = parentElement.querySelector('#password-input');\n        const confirmPasswordInput = parentElement.querySelector('#confirm-password-input');\n        const confirmPasswordErrorElement = parentElement.querySelector('#confirm-password-error');\n        const confirmPasswordContainer = parentElement.querySelector('#confirm-password-container');\n\n        const successBorderClass = \"border-success\";\n        const errorBorderClass = \"border-error\";\n\n        // If any of these critical elements are missing within the parentElement, don't proceed for this scope\n        if (!passwordInput || !confirmPasswordInput || !confirmPasswordErrorElement || !confirmPasswordContainer) {\n            // console.warn('PasswordMatchJS: One or more required elements not found within parent:', parentElement);\n            return;\n        }\n\n        // Prevent re-attaching listeners if already initialized on these specific inputs\n        if (confirmPasswordInput.dataset.matchValidationInitialized === 'true') {\n            // console.log('PasswordMatchJS: Match validation already initialized for confirmPasswordInput in parent:', parentElement);\n            return;\n        }\n\n\n        function validatePasswordsMatch() {\n            confirmPasswordContainer.classList.remove(successBorderClass, errorBorderClass);\n            if (confirmPasswordInput.value === \"\") {\n                confirmPasswordErrorElement.textContent = \"\";\n                confirmPasswordInput.setCustomValidity(\"\");\n                return;\n            }\n            if (passwordInput.value !== confirmPasswordInput.value) {\n                confirmPasswordErrorElement.textContent = \"Passwords do not match.\";\n                confirmPasswordInput.setCustomValidity(\"Passwords do not match.\");\n                confirmPasswordContainer.classList.add(errorBorderClass);\n            } else {\n                confirmPasswordErrorElement.textContent = \"\";\n                confirmPasswordInput.setCustomValidity(\"\");\n                confirmPasswordContainer.classList.add(successBorderClass);\n            }\n        }\n\n        confirmPasswordInput.addEventListener('blur', validatePasswordsMatch);\n        // confirmPasswordInput.addEventListener('input', validatePasswordsMatch); // Optional\n\n        passwordInput.addEventListener('input', function () {\n            if (confirmPasswordInput.value !== \"\") {\n                validatePasswordsMatch();\n            } else {\n                confirmPasswordErrorElement.textContent = \"\";\n                confirmPasswordInput.setCustomValidity(\"\");\n                confirmPasswordContainer.classList.remove(successBorderClass, errorBorderClass);\n            }\n        });\n\n        confirmPasswordInput.addEventListener('focus', function () {\n            confirmPasswordContainer.classList.remove(successBorderClass, errorBorderClass);\n        });\n\n        // Mark as initialized to prevent duplicate listeners from parent calls\n        confirmPasswordInput.dataset.matchValidationInitialized = 'true';\n        // Note: passwordInput's listener might be re-added if it's outside a swapped confirmPasswordInput's parent,\n        // but its effect is idempotent on validatePasswordsMatch.\n    }\n\n    // Initial setup on DOMContentLoaded\n    document.addEventListener('DOMContentLoaded', function () {\n        initializePasswordMatchValidation(document.body);\n    });\n\n    // HTMX event to re-initialize after content swap\n    document.body.addEventListener('htmx:afterSwap', function (event) {\n        // event.detail.elt is the element that htmx swapped into the DOM\n        if (event.detail.elt) {\n            initializePasswordMatchValidation(event.detail.elt);\n        }\n    });\n</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = ViewPasswordJSHandle.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var4), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate

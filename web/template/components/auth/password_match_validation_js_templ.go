// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package auth

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func PasswordMatchValidationJS() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\n        document.addEventListener('DOMContentLoaded', function() {\n            const passwordInput = document.getElementById('password-input');\n            const confirmPasswordInput = document.getElementById('confirm-password-input');\n            const confirmPasswordErrorElement = document.getElementById('confirm-password-error'); // Element to show the error\n\n            if (!passwordInput || !confirmPasswordInput || !confirmPasswordErrorElement) {\n                console.warn('Password match validation: One or more required elements not found.');\n                return; // Exit if elements are missing\n            }\n\n            function validatePasswordsMatch() {\n                if (confirmPasswordInput.value === \"\") { // Don't show error if confirm is empty\n                    confirmPasswordErrorElement.textContent = \"\";\n                    confirmPasswordInput.setCustomValidity(\"\"); // Clear potential HTML5 validation error\n                    return;\n                }\n\n                if (passwordInput.value !== confirmPasswordInput.value) {\n                    confirmPasswordErrorElement.textContent = \"Passwords do not match.\";\n                    // For HTML5 form validation API - prevents submission if you want\n                    // You can remove this if you only want to show the text message\n                    confirmPasswordInput.setCustomValidity(\"Passwords do not match.\");\n                } else {\n                    confirmPasswordErrorElement.textContent = \"\"; // Clear the error message\n                    confirmPasswordInput.setCustomValidity(\"\");   // Clear potential HTML5 validation error\n                }\n            }\n\n            // Validate when the confirm password field loses focus\n            confirmPasswordInput.addEventListener('blur', validatePasswordsMatch);\n\n            // Optional: Also validate as the user types in the confirm password field\n            // confirmPasswordInput.addEventListener('input', validatePasswordsMatch);\n\n            // Optional: If the main password changes, re-validate the confirm password\n            // (in case the user goes back and changes the first password)\n            passwordInput.addEventListener('input', function() {\n                // Only re-validate if confirm password field is not empty\n                if (confirmPasswordInput.value !== \"\") {\n                    validatePasswordsMatch();\n                }\n            });\n        });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
